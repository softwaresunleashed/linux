
To list functions in an executable file
$ nm <name of executable>  | grep " T "

	where nm - list symbols from object files
		
Symbol Type
 	
           "A" The symbol's value is absolute, and will not be changed by further linking.

           "B"
           "b" The symbol is in the uninitialized data section (known as BSS).

           "C" The symbol is common.  Common symbols are uninitialized data.
               When linking, multiple common symbols may appear with the same
               name.  If the symbol is defined anywhere, the common symbols
               are treated as undefined references.

           "D"
           "d" The symbol is in the initialized data section.

           "G"
           "g" The symbol is in an initialized data section for small objects.
 		Some object file formats permit more efficient access to small
               data objects, such as a global int variable as opposed to a
               large global array.

           "i" For PE format files this indicates that the symbol is in a
               section specific to the implementation of DLLs.  For ELF format
               files this indicates that the symbol is an indirect function.
               This is a GNU extension to the standard set of ELF symbol
               types.  It indicates a symbol which if referenced by a
               relocation does not evaluate to its address, but instead must
               be invoked at runtime.  The runtime execution will then return
               the value to be used in the relocation.

           "N" The symbol is a debugging symbol.

           "p" The symbols is in a stack unwind section.

           "R"
           "r" The symbol is in a read only data section.

           "S"
           "s" The symbol is in an uninitialized data section for small
               objects.

           "T"
           "t" The symbol is in the text (code) section.

           "U" The symbol is undefined.

           "u" The symbol is a unique global symbol.  This is a GNU extension
               to the standard set of ELF symbol bindings.  For such a symbol
               the dynamic linker will make sure that in the entire process
               there is just one symbol with this name and type in use.

           "V"
           "v" The symbol is a weak object.  When a weak defined symbol is
               linked with a normal defined symbol, the normal defined symbol
               is used with no error.  When a weak undefined symbol is linked
               and the symbol is not defined, the value of the weak symbol
               becomes zero with no error.  On some systems, uppercase
               indicates that a default value has been specified.

           "W"
           "w" The symbol is a weak symbol that has not been specifically
               tagged as a weak object symbol.  When a weak defined symbol is
               linked with a normal defined symbol, the normal defined symbol
               is used with no error.  When a weak undefined symbol is linked
               and the symbol is not defined, the value of the symbol is
               determined in a system-specific manner without error.  On some
               systems, uppercase indicates that a default value has been
               specified.

           "-" The symbol is a stabs symbol in an a.out object file.  In this
               case, the next values printed are the stabs other field, the
               stabs desc field, and the stab type.  Stabs symbols are used to
               hold debugging information.

	   "?" The symbol type is unknown, or object file format specific.


==============
=GDB Commands=
==============

To start the hacked application in debug mode
$ gdb ./<executable_file>    


To put a breakpoint in any function (to be executed after entering gdb shell - see above)
(gdb)  br <name_of_function>


To pass command line parameter
(gdb)  r <command_line_param>


To step one assembly instruction at a time
(gdb)  stepi


To step program until a different source line; when a program is compiled without any debug information, this command stops just before coming out of the current function.
(gdb)  step


To print value of any variable / register
(gdb) p <register_name> 
e.g. (gdb) p $eax    -- prints the value of intel register EAX (which holds the return value from a function).


To SET value of any register
(gdb) set <register_name>=<value>
e.g. (gdb) set $eax=0 -- sets the value of the register EAX to 0

To continue execution of the program
(gdb) c

To quit gdb shell
(gdb) q
























